#!/usr/bin/python3

import gspread
from oauth2client.service_account import ServiceAccountCredentials
from googleapiclient import discovery
from pprint import pprint
import discord
from discord.ext import commands
from discord.ext.commands import bot
import asyncio
import datetime
import logging


LOG_FORMAT = "%(levelname)s %(asctime)s - %(message)s"
logging.basicConfig(filename="bot.log",
                    level=logging.WARNING, format=LOG_FORMAT)
logger = logging.getLogger()

now = datetime.datetime.now()
bot = commands.Bot(command_prefix='&')
client = discord.Client()

# credential file for discord token
# windows path ../SSPD Secrets/
# on pi in same directory
token_file = open("../SSPD Secrets/dToken.txt", "r")
d_token = token_file.readline()

# authorisation to access google sheet
scope = ["https://spreadsheets.google.com/feeds"]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "../SSPD Secrets/client_secret.json", scope)
gc = gspread.authorize(creds)

# initialise current sheet
sheet = gc.open("Warnings List").sheet1
# intialise test sheet
# test = gc.open("SSPD-Test").sheet1

#-------------------------DANGER: SET TEST SHEET EQUAL TO PROD : DANGER---------------------------#
test = sheet

all = sheet.get_all_records(False, 3, "")

e = discord.Embed()
e.set_image(
    url="https://discordapp.com/assets/e4923594e694a21542a489471ecffa50.svg")


#-----Hardcode-----

#------------------


@bot.event
#@commands.has_role("Moderators™")
async def on_ready():
    # initialise channel ids
    global general
    general = bot.get_channel(266593626501545984)
    global modChannel
    modChannel = bot.get_channel(300045476554735618)
    global logChannel
    logChannel = bot.get_channel(373156271056224256)

    print("ID: " + str(bot.user.id))
    print(bot.user)
    print(bot.user.name + " Ready...")


#----------------------


@bot.event
async def on_message(message):
    if message.author != bot.user:
        # if str.lower(message.content) == "ayy":
        #    channel = message.channel
        #    await channel.send("lmao")

        # navy seal copy pasta
        if "fuck" in str.lower(message.content) and "sspd" in str.lower(message.content):
            channel = message.channel
            await channel.send("Hey " + message.author.name + " What the fuck did you just fucking say about me, you little bitch? I'll have you know I graduated top of my class in the Navy Seals, and I've been involved in numerous secret raids on Al-Quaeda, and I have over 300 confirmed kills. I am trained in gorilla warfare and I'm the top sniper in the entire US armed forces. You are nothing to me but just another target. I will wipe you the fuck out with precision the likes of which has never been seen before on this Earth, mark my fucking words. You think you can get away with saying that shit to me over the Internet? Think again, fucker. As we speak I am contacting my secret network of spies across the USA and your IP is being traced right now so you better prepare for the storm, maggot. The storm that wipes out the pathetic little thing you call your life. You're fucking dead, kid. I can be anywhere, anytime, and I can kill you in over seven hundred ways, and that's just with my bare hands. Not only am I extensively trained in unarmed combat, but I have access to the entire arsenal of the United States Marine Corps and I will use it to its full extent to wipe your miserable ass off the face of the continent, you little shit. If only you could have known what unholy retribution your little \"clever\" comment was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn't, you didn't, and now you're paying the price, you goddamn idiot. I will shit fury all over you and you will drown in it. You're fucking dead, kiddo.")

        # bam backwards
        if str.lower(message.content) == "mab":
            channel = message.channel
            await channel.send("https://gph.is/2SonApE")

        # remove invite links
        if "discord.gg" in message.content:
            msg = "User: " + str(message.author) + ", id: " + \
                str(message.author.id) + ", posted a suspected invite link in the message: \n" + \
                "\"" + message.content + "\"\n" + "In channel: " + \
                message.channel.name + "\nMessage removed."
            await modChannel.send(msg)
            print(msg)
            await message.delete()

    # free up the bot event
    await bot.process_commands(message)


@bot.command(pass_context=True)
async def lewgasm(ctx):
    await ctx.send("https://imgur.com/a/oLKuUVY")


@bot.command(pass_context=True)
@commands.has_role("Moderators™")
async def ping(ctx):
    await ctx.send(f"pong! {ctx.message.author}")


@bot.command(pass_context=True)
@commands.has_role("Moderators™")
async def getline(ctx, num):
    await ctx.send(GetRow(num))


@bot.command(pass_context=True)
@commands.has_role("Moderators™")
async def strike(ctx, user: discord.Member, *, rule=None):

    # check if a user already has an entry
    listed = alreadyListedCheck(user, test)
    row_index = next_available_row(test)

    # if user has no record already then make one else append to the old
    if bool(listed) == False:
        cell_list = test.range(row_index, 1, row_index, 4)
        record = make_new_record(ctx, user, rule, row_index, False)

        cell_list = apply_values(cell_list, record)

        # batch update
        test.update_cells(cell_list)
    else:
        # offset - how much to add to the indices to get the right columns
        offset = existing_warning_count(listed) * 3
        cell_list = test.range(listed, 2+offset, listed, 4+offset)
        record = make_new_record(ctx, user, rule, listed, True)

        cell_list = apply_values(cell_list, record)

        # batch update
        test.update_cells(cell_list)

        warning_text = f"You have been given a disciplinary strike in the Angory Tom Discord server for:\n{rule}\nStrikes may be repealed 1 month after recieving them if you ask a moderator.\Accumulate too many of these and you'll be banned."

        await user.send(warning_text)

        if existing_warning_count(listed) == 3:
            msg = f"{user} is on penultimate warning. Take aditional action."
            await modChannel.send(msg)
        if existing_warning_count(listed) >= 4:
            msg = f"{user} used their final warning. Banning user..."
            await modChannel.send(msg)


@bot.command(pass_context=True)
@commands.has_role("Moderators™")
async def channelTest(ctx, flag: int):
    if flag == 3:
        await general.send("test" + str(flag))
    elif flag == 2:
        await modChannel.send("test" + str(flag))
    elif flag == 1:
        await logChannel.send("test" + str(flag))
    else:
        ctx.send("Incrrect usage. \n channeltest [x] where 0<x<4")


@bot.command(pass_context=True)
@commands.has_role("Moderators™")
async def pmTest(ctx, user: discord.Member, *message: str):
    await user.send(message)
    #-----------------------------


def apply_values(cell_list, values_list):
    for i, cell in enumerate(cell_list):
        cell_list[i].value = values_list[i]
    return cell_list


def existing_warning_count(row_num):
    cols_used = len(GetRow(row_num))

    count = (cols_used-1)/3
    return count


def make_new_record(ctx, user, rule, row_index, record_exists):
    new_record = []

    if record_exists == False:
        new_record.append(str(user))
        new_record.append(str("Rule " + rule))
        new_record.append(str(now.strftime("%Y-%m-%d")))
        new_record.append(str(ctx.message.author))
    else:
        new_record.append(str("Rule " + rule))
        new_record.append(str(now.strftime("%Y-%m-%d")))
        new_record.append(str(ctx.message.author))
    return new_record


def GetRow(num):
    warnings = sheet.row_values(num)
    # remove empty cells
    warnings = list(filter(lambda x: x != '', warnings))
    # warnings.insert(5, "|")
    return warnings


def next_available_row(worksheet):
    str_list = list(filter(None, worksheet.col_values(1)))
    return len(str_list)+2


def alreadyListedCheck(user: discord.Member, worksheet):
    # str_list gets a list of all enries in column 1
    str_list = list(filter(None, worksheet.col_values(1)))
    found = None
    for item in str_list:
        if str(user.discriminator) in item:
            found = str_list.index(item)+2
            break
    return found


async def notification(ctx, user: discord.Member, rule):
    embed = discord.Embed(title="POO LAGOONER DETECTED: Disciplinary Action Taken", description="Strike dealt to @" +
                          str(user) + " for rule" + str(rule) + ".", color=0xFF0000)
    embed.set_footer(
        text="Further misbehaviour may result in deportation to Poo Island.")
    embed.set_image(url="https://i.imgur.com/eYTcdNe.jpg")
    # await client.send_message(discord.Object(id='general'), embed=embed)
    noti_string = str(str(user) + " striked for rule " +
                      rule + " on " + now.strftime("%Y-%m-%d") + ".")
    await ctx.send(embed=embed)
    print(noti_string)


bot.run(d_token)
